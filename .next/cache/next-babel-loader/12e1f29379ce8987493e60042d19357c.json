{"ast":null,"code":"var _jsxFileName = \"/Users/connermatson/Projects/rona/components/StateStats.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport useStats from \"../lib/useStats\";\nimport StateBlock from \"./StateBlock\";\n\nconst StateStats = ({\n  url\n}) => {\n  const {\n    stats,\n    loading,\n    error\n  } = useStats(url);\n  const {\n    0: selectedState,\n    1: setSelectedState\n  } = useState(\"Missouri\");\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Loading....\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Error...\");\n  let states = [];\n\n  for (let i = 0; i < stats.length; i++) {\n    if (states.indexOf(stats[i].provinceState) === -1) {\n      states.push(stats[i].provinceState);\n    }\n\n    states.sort();\n  }\n\n  console.log(states.length);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      marginTop: \"5vh\",\n      justifyContent: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    style: {\n      margin: \"0 2vw 0 0\",\n      fontSize: \"3vh\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Select a state\"), __jsx(\"select\", {\n    style: {\n      width: \"40vw\",\n      border: \"1px solid black\",\n      background: \"transparent\",\n      boxShadow: \"2px 2px grey\",\n      fontSize: \"20px\"\n    },\n    onChange: e => {\n      setSelectedState(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, states.map(state => __jsx(\"option\", {\n    value: state,\n    key: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, state)))), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    style: {\n      fontSize: \"3vh\",\n      fontWeight: \"bold\",\n      padding: \"4vh\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Now viewing counties in: \", selectedState.toUpperCase())), __jsx(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(2, 1fr)\",\n      gridGap: \"2rem\",\n      margin: \"5vh 0 5vh 0\",\n      padding: \"1rem\",\n      justifyItems: \"center\",\n      overflowY: \"scroll\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, stats.map(state => state.provinceState === selectedState ? __jsx(StateBlock, {\n    state: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }) : null)));\n};\n\nexport default StateStats;","map":{"version":3,"sources":["/Users/connermatson/Projects/rona/components/StateStats.js"],"names":["React","useState","useStats","StateBlock","StateStats","url","stats","loading","error","selectedState","setSelectedState","states","i","length","indexOf","provinceState","push","sort","console","log","display","marginTop","justifyContent","margin","fontSize","width","border","background","boxShadow","e","target","value","map","state","fontWeight","padding","toUpperCase","gridTemplateColumns","gridGap","justifyItems","overflowY"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useStats from \"../lib/useStats\";\nimport StateBlock from \"./StateBlock\";\n\nconst StateStats = ({ url }) => {\n  const { stats, loading, error } = useStats(url);\n\n  const [selectedState, setSelectedState] = useState(\"Missouri\");\n\n  if (loading) return <p>Loading....</p>;\n  if (error) return <p>Error...</p>;\n\n  let states = [];\n  for (let i = 0; i < stats.length; i++) {\n    if (states.indexOf(stats[i].provinceState) === -1) {\n      states.push(stats[i].provinceState);\n    }\n    states.sort();\n  }\n\n  console.log(states.length);\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          marginTop: \"5vh\",\n          justifyContent: \"center\",\n        }}\n      >\n        <span\n          style={{\n            margin: \"0 2vw 0 0\",\n            fontSize: \"3vh\",\n          }}\n        >\n          Select a state\n        </span>\n        <select\n          style={{\n            width: \"40vw\",\n            border: \"1px solid black\",\n            background: \"transparent\",\n            boxShadow: \"2px 2px grey\",\n            fontSize: \"20px\",\n          }}\n          onChange={e => {\n            setSelectedState(e.target.value);\n          }}\n        >\n          {states.map(state => (\n            <option value={state} key={state}>\n              {state}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <span\n          style={{\n            fontSize: \"3vh\",\n            fontWeight: \"bold\",\n            padding: \"4vh\",\n          }}\n        >\n          Now viewing counties in: {selectedState.toUpperCase()}\n        </span>\n      </div>\n\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(2, 1fr)\",\n          gridGap: \"2rem\",\n          margin: \"5vh 0 5vh 0\",\n          padding: \"1rem\",\n          justifyItems: \"center\",\n          overflowY: \"scroll\",\n        }}\n      >\n        {stats.map(state =>\n          state.provinceState === selectedState ? (\n            <StateBlock state={state} />\n          ) : null,\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default StateStats;\n"]},"metadata":{},"sourceType":"module"}